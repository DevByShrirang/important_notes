1. How do you deploy applications on EKS using Helm and Argo CD?
Answer:
I use Helm to package Kubernetes applications into charts, which define all required resources like Deployments, Services, ConfigMaps, etc. These charts are version-controlled in a Git repository.

I use Argo CD to implement GitOps. In Argo CD, I create an application by specifying the Git repo URL and the Helm chart path. Argo CD continuously monitors the repo, and whenever changes are committed, it automatically syncs the updated manifests to the EKS cluster. This provides automated, declarative, and consistent deployments.

✅ 2. What’s the difference between Helm and Argo CD? Why use both?
Answer:
Helm is a package manager for Kubernetes—it templates and packages Kubernetes resources. Argo CD is a GitOps tool that manages and automates Kubernetes deployments based on Git repositories.

I use Helm for templating and packaging, and Argo CD for continuous delivery. Together, they offer a powerful combination: Helm manages complexity, and Argo CD provides visibility, control, and automation.

✅ 3. What are the key components of an Argo CD Application manifest?
Answer:
The key components are:

apiVersion, kind, metadata: Basic K8s metadata.

spec:

source: Git repository URL, target revision (branch or tag), and path to the Helm chart or manifests.

destination: Cluster URL and namespace where the app will be deployed.

syncPolicy: Can define auto-sync, automated pruning, or self-healing behavior.

✅ 4. How do you manage multiple environments like dev, staging, and prod?
Answer:
I structure the Git repository with separate folders for each environment (e.g., helm/dev, helm/staging, helm/prod) and define values files accordingly.

In Argo CD, I create separate applications per environment, each pointing to the appropriate path and values file. This provides isolation, traceability, and environment-specific configurations.

✅ 5. What strategies do you use for Helm chart versioning and rollback?
Answer:
I maintain versioned Helm charts in Git or a Helm repository. For each deployment, I tag the release and track changes in Git history.

For rollback, Helm supports helm rollback to revert to a previous release. In Argo CD, I can also click “Rollback” to sync to an earlier commit or chart version.

✅ 6. How does Argo CD expose the application for access?
Answer:
Argo CD itself does not expose the application. It deploys Kubernetes manifests that include Services, Ingress, or LoadBalancers, which expose the app.

I typically use an Ingress controller (like ALB or NGINX) to expose applications. The Ingress is defined in the Helm chart, and once applied by Argo CD, the app becomes accessible via DNS or IP.

✅ 7. How do you handle secret management in Helm and Argo CD?
Answer:
Secrets are sensitive. I use tools like Sealed Secrets or External Secrets to manage them securely. For Helm, I avoid committing secrets in values.yaml. Instead, I use encrypted files with tools like sops.

Argo CD supports integration with Vault and SOPS. We configure Argo CD to decrypt secrets during sync and apply them safely to the cluster.

✅ 8. What is the sync policy in Argo CD?
Answer:
Sync policy controls how updates from Git are applied. There are three modes:

Manual: User must trigger sync.

Automated: Auto-sync on Git change.

Self-heal: Detects out-of-sync resources and corrects them.

Prune: Deletes obsolete resources.

For production apps, I use automated sync with pruning and self-healing for resilience.

✅ 9. How do you monitor Argo CD and application health?
Answer:
Argo CD provides real-time application status, sync status, and health checks using Kubernetes probes.

For deeper observability, I integrate it with Prometheus and Grafana using the Argo CD exporter. I also set alerts for sync failures and unhealthy apps via Slack or email.

✅ 10. What’s your CI/CD workflow with Jenkins, Helm, and Argo CD?
Answer:

Jenkins builds the Docker image, pushes it to ECR.

It updates the Helm chart with the new image tag in the Git repo.

Argo CD detects the change in Git and automatically deploys it to EKS.

Post-deploy validation and monitoring follow.

This ensures an end-to-end GitOps-based CI/CD pipeline.